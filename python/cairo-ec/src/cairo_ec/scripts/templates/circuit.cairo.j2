{%- set return_values = ["UInt384*"] * (circuit.return_data_size // 4) %}
{%- set return_type = "" if not return_values else
    "-> " + (("(" if return_values|length > 1 else "") +
    return_values|join(", ") +
    (")" if return_values|length > 1 else "")) %}

{%- set return_data = "()" %}
{%- if return_values %}
    {%- set return_exprs = [] %}
    {%- for i in range(circuit.return_data_size // 4)|reverse %}
        {%- set offset = 4 * (i + 1) %}
        {%- set _ = return_exprs.append("cast(range_check96_ptr - " ~ offset ~ ", UInt384*)") %}
    {%- endfor %}
    {%- set return_data = ("(" if return_values|length > 1 else "") ~ return_exprs|join(", ") ~ (")" if return_values|length > 1 else "") %}
{%- endif %}

func {{name}}{range_check96_ptr: felt*, add_mod_ptr: ModBuiltin*, mul_mod_ptr: ModBuiltin*}(
    {%- for member_name in circuit.args -%}
    {{ member_name }}: UInt384*{{ ", " if not loop.last else "" }}
    {%- endfor -%}, p: UInt384*
) {{return_type}} {
    let (_, pc) = get_fp_and_pc();

    pc_label:
    let add_mod_offsets_ptr = pc + (add_offsets - pc_label);
    let mul_mod_offsets_ptr = pc + (mul_offsets - pc_label);

    {# First iterate over constants #}
    {%- for value in circuit.constants %}
    assert [range_check96_ptr + {{loop.index0 * 4}}] = {{value[0]}};
    assert [range_check96_ptr + {{loop.index0 * 4 + 1}}] = {{value[1]}};
    assert [range_check96_ptr + {{loop.index0 * 4 + 2}}] = {{value[2]}};
    assert [range_check96_ptr + {{loop.index0 * 4 + 3}}] = {{value[3]}};
    {%- endfor %}

    {# Then iterate over arguments #}
    {%- for member_name in circuit.args %}
    assert [range_check96_ptr + {{(circuit.constants|length + loop.index0) * 4}}] = {{member_name}}.d0;
    assert [range_check96_ptr + {{(circuit.constants|length + loop.index0) * 4 + 1}}] = {{member_name}}.d1;
    assert [range_check96_ptr + {{(circuit.constants|length + loop.index0) * 4 + 2}}] = {{member_name}}.d2;
    assert [range_check96_ptr + {{(circuit.constants|length + loop.index0) * 4 + 3}}] = {{member_name}}.d3;
    {%- endfor %}

    run_mod_p_circuit(
        p=[p],
        values_ptr=cast(range_check96_ptr, UInt384*),
        add_mod_offsets_ptr=add_mod_offsets_ptr,
        add_mod_n={{circuit.add_mod_n}},
        mul_mod_offsets_ptr=mul_mod_offsets_ptr,
        mul_mod_n={{circuit.mul_mod_n}},
    );

    let range_check96_ptr = range_check96_ptr + {{circuit.total_offset}};

    return {{return_data}};

    add_offsets:
    {%- for offset in circuit.add_mod_offsets_ptr %}
    dw {{offset}};
    {%- endfor %}

    mul_offsets:
    {%- for offset in circuit.mul_mod_offsets_ptr %}
    dw {{offset}};
    {%- endfor %}
}
